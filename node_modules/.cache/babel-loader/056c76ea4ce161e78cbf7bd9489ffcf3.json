{"ast":null,"code":"const openSource = {\n  githubConvertedToken: \"fa32ed6e21351a9238b7f7371d8b33b4c88ca91a\",\n  githubUserName: \"Smponi\"\n};\n\nconst fetch = require(\"node-fetch\");\n\nvar fs = require(\"fs\");\n\nconst query_pr = {\n  query: `\n\tquery {\n\t  user(login: \"${openSource.githubUserName}\"){\n\t    pullRequests(last: 100, orderBy: {field: CREATED_AT, direction: DESC}){\n      totalCount\n      nodes{\n        id\n        title\n        url\n        state\n\t      mergedBy {\n\t          avatarUrl\n\t          url\n\t          login\n\t      }\n\t      createdAt\n\t      number\n        changedFiles\n\t      additions\n\t      deletions\n        baseRepository {\n\t          name\n\t          url\n\t          owner {\n\t            avatarUrl\n\t            login\n\t            url\n\t          }\n\t        }\n      }\n    }\n\t}\n}\n\t`\n};\nconst query_issue = {\n  query: `query{\n\n\t\tuser(login: \"${openSource.githubUserName}\") {\n    issues(last: 100, orderBy: {field:CREATED_AT, direction: DESC}){\n      totalCount\n      nodes{\n      \tid\n        closed\n        title\n        createdAt\n        url\n        number\n        assignees(first:100){\n          nodes{\n            avatarUrl\n            name\n            url\n          }\n        }\n        repository{\n          name\n          url\n          owner{\n            login\n            avatarUrl\n            url\n          }\n        }\n      }\n    }\n  }\n\n\t}`\n};\nconst query_org = {\n  query: `query{\n\tuser(login: \"${openSource.githubUserName}\") {\n\t    repositoriesContributedTo(last: 100){\n\t      totalCount\n\t      nodes{\n\t        owner{\n\t          login\n\t          avatarUrl\n\t          __typename\n\t        }\n\t      }\n\t    }\n\t  }\n\t}`\n};\nconst query_pinned_projects = {\n  query: `\n\tquery { \n\t  user(login: \"${openSource.githubUserName}\") { \n\t    pinnedItems(first: 6, types: REPOSITORY) {\n\t      totalCount\n\t      nodes{\n\t        ... on Repository{\n\t          id\n\t\t          name\n\t\t          createdAt,\n\t\t          url,\n\t\t          description,\n\t\t          isFork,\n\t\t          languages(first:10){\n\t\t            nodes{\n\t\t              name\n\t\t            }\n\t\t          }\n\t        }\n\t      }\n\t\t  }\n\t  }\n\t}\n\t`\n};\nconst baseUrl = \"https://api.github.com/graphql\";\nconst headers = {\n  \"Content-Type\": \"application/json\",\n  Authorization: \"bearer \" + openSource.githubConvertedToken\n};\nfetch(baseUrl, {\n  method: \"POST\",\n  headers: headers,\n  body: JSON.stringify(query_pr)\n}).then(response => response.text()).then(txt => {\n  const data = JSON.parse(txt);\n  var cropped = {\n    data: []\n  };\n  cropped[\"data\"] = data[\"data\"][\"user\"][\"pullRequests\"][\"nodes\"];\n  var open = 0;\n  var closed = 0;\n  var merged = 0;\n\n  for (var i = 0; i < cropped[\"data\"].length; i++) {\n    if (cropped[\"data\"][i][\"state\"] === \"OPEN\") open++;else if (cropped[\"data\"][i][\"state\"] === \"MERGED\") merged++;else closed++;\n  }\n\n  cropped[\"open\"] = open;\n  cropped[\"closed\"] = closed;\n  cropped[\"merged\"] = merged;\n  cropped[\"totalCount\"] = cropped[\"data\"].length;\n  console.log(\"Fetching the Pull Request Data.\\n\");\n  fs.writeFile(\"./src/shared/opensource/pull_requests.json\", JSON.stringify(cropped), function (err) {\n    if (err) {\n      console.log(err);\n    }\n  });\n}).catch(error => console.log(JSON.stringify(error)));\nfetch(baseUrl, {\n  method: \"POST\",\n  headers: headers,\n  body: JSON.stringify(query_issue)\n}).then(response => response.text()).then(txt => {\n  const data = JSON.parse(txt);\n  var cropped = {\n    data: []\n  };\n  cropped[\"data\"] = data[\"data\"][\"user\"][\"issues\"][\"nodes\"];\n  var open = 0;\n  var closed = 0;\n\n  for (var i = 0; i < cropped[\"data\"].length; i++) {\n    if (cropped[\"data\"][i][\"closed\"] === false) open++;else closed++;\n  }\n\n  cropped[\"open\"] = open;\n  cropped[\"closed\"] = closed;\n  cropped[\"totalCount\"] = cropped[\"data\"].length;\n  console.log(\"Fetching the Issues Data.\\n\");\n  fs.writeFile(\"./src/shared/opensource/issues.json\", JSON.stringify(cropped), function (err) {\n    if (err) {\n      console.log(err);\n    }\n  });\n}).catch(error => console.log(JSON.stringify(error)));\nfetch(baseUrl, {\n  method: \"POST\",\n  headers: headers,\n  body: JSON.stringify(query_org)\n}).then(response => response.text()).then(txt => {\n  const data = JSON.parse(txt);\n  const orgs = data[\"data\"][\"user\"][\"repositoriesContributedTo\"][\"nodes\"];\n  var newOrgs = {\n    data: []\n  };\n\n  for (var i = 0; i < orgs.length; i++) {\n    var obj = orgs[i][\"owner\"];\n\n    if (obj[\"__typename\"] === \"Organization\") {\n      var flag = 0;\n\n      for (var j = 0; j < newOrgs[\"data\"].length; j++) {\n        if (JSON.stringify(obj) === JSON.stringify(newOrgs[\"data\"][j])) {\n          flag = 1;\n          break;\n        }\n      }\n\n      if (flag === 0) {\n        newOrgs[\"data\"].push(obj);\n      }\n    }\n  }\n\n  console.log(\"Fetching the Contributed Organization Data.\\n\");\n  fs.writeFile(\"./src/shared/opensource/organizations.json\", JSON.stringify(newOrgs), function (err) {\n    if (err) {\n      console.log(err);\n    }\n  });\n}).catch(error => console.log(JSON.stringify(error)));\nconst languages_icons = {\n  Python: \"logos-python\",\n  \"Jupyter Notebook\": \"logos-jupyter\",\n  HTML: \"logos-html-5\",\n  CSS: \"logos-css-3\",\n  JavaScript: \"logos-javascript\",\n  \"C#\": \"logos-c-sharp\",\n  Java: \"logos-java\"\n};\nmodule.exports = {\n  getProjects: fetch(baseUrl, {\n    method: \"POST\",\n    headers: headers,\n    body: JSON.stringify(query_pinned_projects)\n  }).then(response => response.text()).then(txt => {\n    const data = JSON.parse(txt); // console.log(txt);\n\n    const projects = data[\"data\"][\"user\"][\"pinnedItems\"][\"nodes\"];\n    var newProjects = {\n      data: []\n    };\n\n    for (var i = 0; i < projects.length; i++) {\n      var obj = projects[i];\n      var langobjs = obj[\"languages\"][\"nodes\"];\n      var newLangobjs = [];\n\n      for (var j = 0; j < langobjs.length; j++) {\n        if (langobjs[j][\"name\"] in languages_icons) {\n          newLangobjs.push({\n            name: langobjs[j][\"name\"],\n            iconifyClass: languages_icons[langobjs[j][\"name\"]]\n          });\n        }\n      }\n\n      obj[\"languages\"] = newLangobjs;\n      newProjects[\"data\"].push(obj);\n    }\n\n    console.log(\"Fetching the Pinned Projects Data.\\n\");\n    fs.writeFile(\"./src/shared/opensource/projects.json\", JSON.stringify(newProjects), function (err) {\n      if (err) {\n        console.log(\"Error occured in pinned projects 1\", JSON.stringify(err));\n      }\n    });\n  }).catch(error => console.log(\"Error occured in pinned projects 2\", JSON.stringify(error)))\n};","map":{"version":3,"sources":["/home/philipp/Dokumente/Portfolio-react/src/pages/projects/git_data_fetcher.js"],"names":["openSource","githubConvertedToken","githubUserName","fetch","require","fs","query_pr","query","query_issue","query_org","query_pinned_projects","baseUrl","headers","Authorization","method","body","JSON","stringify","then","response","text","txt","data","parse","cropped","open","closed","merged","i","length","console","log","writeFile","err","catch","error","orgs","newOrgs","obj","flag","j","push","languages_icons","Python","HTML","CSS","JavaScript","Java","module","exports","getProjects","projects","newProjects","langobjs","newLangobjs","name","iconifyClass"],"mappings":"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","sourcesContent":["const openSource = {\n  githubConvertedToken: \"fa32ed6e21351a9238b7f7371d8b33b4c88ca91a\",\n  githubUserName: \"Smponi\",\n};\n\nconst fetch = require(\"node-fetch\");\nvar fs = require(\"fs\");\n\nconst query_pr = {\n  query: `\n\tquery {\n\t  user(login: \"${openSource.githubUserName}\"){\n\t    pullRequests(last: 100, orderBy: {field: CREATED_AT, direction: DESC}){\n      totalCount\n      nodes{\n        id\n        title\n        url\n        state\n\t      mergedBy {\n\t          avatarUrl\n\t          url\n\t          login\n\t      }\n\t      createdAt\n\t      number\n        changedFiles\n\t      additions\n\t      deletions\n        baseRepository {\n\t          name\n\t          url\n\t          owner {\n\t            avatarUrl\n\t            login\n\t            url\n\t          }\n\t        }\n      }\n    }\n\t}\n}\n\t`,\n};\n\nconst query_issue = {\n  query: `query{\n\n\t\tuser(login: \"${openSource.githubUserName}\") {\n    issues(last: 100, orderBy: {field:CREATED_AT, direction: DESC}){\n      totalCount\n      nodes{\n      \tid\n        closed\n        title\n        createdAt\n        url\n        number\n        assignees(first:100){\n          nodes{\n            avatarUrl\n            name\n            url\n          }\n        }\n        repository{\n          name\n          url\n          owner{\n            login\n            avatarUrl\n            url\n          }\n        }\n      }\n    }\n  }\n\n\t}`,\n};\n\nconst query_org = {\n  query: `query{\n\tuser(login: \"${openSource.githubUserName}\") {\n\t    repositoriesContributedTo(last: 100){\n\t      totalCount\n\t      nodes{\n\t        owner{\n\t          login\n\t          avatarUrl\n\t          __typename\n\t        }\n\t      }\n\t    }\n\t  }\n\t}`,\n};\n\nconst query_pinned_projects = {\n  query: `\n\tquery { \n\t  user(login: \"${openSource.githubUserName}\") { \n\t    pinnedItems(first: 6, types: REPOSITORY) {\n\t      totalCount\n\t      nodes{\n\t        ... on Repository{\n\t          id\n\t\t          name\n\t\t          createdAt,\n\t\t          url,\n\t\t          description,\n\t\t          isFork,\n\t\t          languages(first:10){\n\t\t            nodes{\n\t\t              name\n\t\t            }\n\t\t          }\n\t        }\n\t      }\n\t\t  }\n\t  }\n\t}\n\t`,\n};\n\nconst baseUrl = \"https://api.github.com/graphql\";\n\nconst headers = {\n  \"Content-Type\": \"application/json\",\n  Authorization: \"bearer \" + openSource.githubConvertedToken,\n};\n\nfetch(baseUrl, {\n  method: \"POST\",\n  headers: headers,\n  body: JSON.stringify(query_pr),\n})\n  .then((response) => response.text())\n  .then((txt) => {\n    const data = JSON.parse(txt);\n    var cropped = { data: [] };\n    cropped[\"data\"] = data[\"data\"][\"user\"][\"pullRequests\"][\"nodes\"];\n\n    var open = 0;\n    var closed = 0;\n    var merged = 0;\n    for (var i = 0; i < cropped[\"data\"].length; i++) {\n      if (cropped[\"data\"][i][\"state\"] === \"OPEN\") open++;\n      else if (cropped[\"data\"][i][\"state\"] === \"MERGED\") merged++;\n      else closed++;\n    }\n\n    cropped[\"open\"] = open;\n    cropped[\"closed\"] = closed;\n    cropped[\"merged\"] = merged;\n    cropped[\"totalCount\"] = cropped[\"data\"].length;\n\n    console.log(\"Fetching the Pull Request Data.\\n\");\n    fs.writeFile(\n      \"./src/shared/opensource/pull_requests.json\",\n      JSON.stringify(cropped),\n      function (err) {\n        if (err) {\n          console.log(err);\n        }\n      }\n    );\n  })\n  .catch((error) => console.log(JSON.stringify(error)));\n\nfetch(baseUrl, {\n  method: \"POST\",\n  headers: headers,\n  body: JSON.stringify(query_issue),\n})\n  .then((response) => response.text())\n  .then((txt) => {\n    const data = JSON.parse(txt);\n    var cropped = { data: [] };\n    cropped[\"data\"] = data[\"data\"][\"user\"][\"issues\"][\"nodes\"];\n\n    var open = 0;\n    var closed = 0;\n    for (var i = 0; i < cropped[\"data\"].length; i++) {\n      if (cropped[\"data\"][i][\"closed\"] === false) open++;\n      else closed++;\n    }\n\n    cropped[\"open\"] = open;\n    cropped[\"closed\"] = closed;\n    cropped[\"totalCount\"] = cropped[\"data\"].length;\n\n    console.log(\"Fetching the Issues Data.\\n\");\n    fs.writeFile(\n      \"./src/shared/opensource/issues.json\",\n      JSON.stringify(cropped),\n      function (err) {\n        if (err) {\n          console.log(err);\n        }\n      }\n    );\n  })\n  .catch((error) => console.log(JSON.stringify(error)));\n\nfetch(baseUrl, {\n  method: \"POST\",\n  headers: headers,\n  body: JSON.stringify(query_org),\n})\n  .then((response) => response.text())\n  .then((txt) => {\n    const data = JSON.parse(txt);\n    const orgs = data[\"data\"][\"user\"][\"repositoriesContributedTo\"][\"nodes\"];\n    var newOrgs = { data: [] };\n    for (var i = 0; i < orgs.length; i++) {\n      var obj = orgs[i][\"owner\"];\n      if (obj[\"__typename\"] === \"Organization\") {\n        var flag = 0;\n        for (var j = 0; j < newOrgs[\"data\"].length; j++) {\n          if (JSON.stringify(obj) === JSON.stringify(newOrgs[\"data\"][j])) {\n            flag = 1;\n            break;\n          }\n        }\n        if (flag === 0) {\n          newOrgs[\"data\"].push(obj);\n        }\n      }\n    }\n\n    console.log(\"Fetching the Contributed Organization Data.\\n\");\n    fs.writeFile(\n      \"./src/shared/opensource/organizations.json\",\n      JSON.stringify(newOrgs),\n      function (err) {\n        if (err) {\n          console.log(err);\n        }\n      }\n    );\n  })\n  .catch((error) => console.log(JSON.stringify(error)));\n\nconst languages_icons = {\n  Python: \"logos-python\",\n  \"Jupyter Notebook\": \"logos-jupyter\",\n  HTML: \"logos-html-5\",\n  CSS: \"logos-css-3\",\n  JavaScript: \"logos-javascript\",\n  \"C#\": \"logos-c-sharp\",\n  Java: \"logos-java\",\n};\n\n\n\nmodule.exports = {\ngetProjects: fetch(baseUrl, {\n  method: \"POST\",\n  headers: headers,\n  body: JSON.stringify(query_pinned_projects),\n})\n  .then((response) => response.text())\n  .then((txt) => {\n    const data = JSON.parse(txt);\n    // console.log(txt);\n    const projects = data[\"data\"][\"user\"][\"pinnedItems\"][\"nodes\"];\n    var newProjects = { data: [] };\n    for (var i = 0; i < projects.length; i++) {\n      var obj = projects[i];\n      var langobjs = obj[\"languages\"][\"nodes\"];\n      var newLangobjs = [];\n      for (var j = 0; j < langobjs.length; j++) {\n        if (langobjs[j][\"name\"] in languages_icons) {\n          newLangobjs.push({\n            name: langobjs[j][\"name\"],\n            iconifyClass: languages_icons[langobjs[j][\"name\"]],\n          });\n        }\n      }\n      obj[\"languages\"] = newLangobjs;\n      newProjects[\"data\"].push(obj);\n    }\n\n    console.log(\"Fetching the Pinned Projects Data.\\n\");\n    fs.writeFile(\n      \"./src/shared/opensource/projects.json\",\n      JSON.stringify(newProjects),\n      function (err) {\n        if (err) {\n          console.log(\n            \"Error occured in pinned projects 1\",\n            JSON.stringify(err)\n          );\n        }\n      }\n    );\n  })\n  .catch((error) =>\n    console.log(\"Error occured in pinned projects 2\", JSON.stringify(error))\n  )};\n"]},"metadata":{},"sourceType":"module"}